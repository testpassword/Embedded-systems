
SDK_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fa0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001128  08001128  00011128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001140  08001140  00011140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001148  08001148  00011148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800114c  0800114c  0001114c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  2000002c  2000002c  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000088b5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001548  00000000  00000000  000288f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000388  00000000  00000000  00029e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000368  00000000  00000000  0002a1c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001fb80  00000000  00000000  0002a530  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005548  00000000  00000000  0004a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000ba4f7  00000000  00000000  0004f5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00109aef  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000007bc  00000000  00000000  00109b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00001063  00000000  00000000  0010a328  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001110 	.word	0x08001110

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001110 	.word	0x08001110

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	2400      	movs	r4, #0
 80004ce:	9405      	str	r4, [sp, #20]
 80004d0:	9406      	str	r4, [sp, #24]
 80004d2:	9407      	str	r4, [sp, #28]
 80004d4:	9408      	str	r4, [sp, #32]
 80004d6:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004d8:	9401      	str	r4, [sp, #4]
 80004da:	4b24      	ldr	r3, [pc, #144]	; (800056c <MX_GPIO_Init+0xa4>)
 80004dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80004e2:	631a      	str	r2, [r3, #48]	; 0x30
 80004e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004e6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80004ea:	9201      	str	r2, [sp, #4]
 80004ec:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ee:	9402      	str	r4, [sp, #8]
 80004f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004f2:	f042 0208 	orr.w	r2, r2, #8
 80004f6:	631a      	str	r2, [r3, #48]	; 0x30
 80004f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004fa:	f002 0208 	and.w	r2, r2, #8
 80004fe:	9202      	str	r2, [sp, #8]
 8000500:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	9403      	str	r4, [sp, #12]
 8000504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000506:	f042 0201 	orr.w	r2, r2, #1
 800050a:	631a      	str	r2, [r3, #48]	; 0x30
 800050c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800050e:	f002 0201 	and.w	r2, r2, #1
 8000512:	9203      	str	r2, [sp, #12]
 8000514:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	9404      	str	r4, [sp, #16]
 8000518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800051a:	f042 0202 	orr.w	r2, r2, #2
 800051e:	631a      	str	r2, [r3, #48]	; 0x30
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	9304      	str	r3, [sp, #16]
 8000528:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800052a:	4e11      	ldr	r6, [pc, #68]	; (8000570 <MX_GPIO_Init+0xa8>)
 800052c:	4622      	mov	r2, r4
 800052e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000532:	4630      	mov	r0, r6
 8000534:	f000 fa72 	bl	8000a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000538:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800053c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	2301      	movs	r3, #1
 8000540:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000544:	2502      	movs	r5, #2
 8000546:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000548:	a905      	add	r1, sp, #20
 800054a:	4630      	mov	r0, r6
 800054c:	f000 f982 	bl	8000854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000550:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000554:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000556:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800055c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055e:	a905      	add	r1, sp, #20
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <MX_GPIO_Init+0xac>)
 8000562:	f000 f977 	bl	8000854 <HAL_GPIO_Init>

}
 8000566:	b00a      	add	sp, #40	; 0x28
 8000568:	bd70      	pop	{r4, r5, r6, pc}
 800056a:	bf00      	nop
 800056c:	40023800 	.word	0x40023800
 8000570:	40020c00 	.word	0x40020c00
 8000574:	40020000 	.word	0x40020000

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057c:	2230      	movs	r2, #48	; 0x30
 800057e:	2100      	movs	r1, #0
 8000580:	a808      	add	r0, sp, #32
 8000582:	f000 fdbd 	bl	8001100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000586:	2400      	movs	r4, #0
 8000588:	9403      	str	r4, [sp, #12]
 800058a:	9404      	str	r4, [sp, #16]
 800058c:	9405      	str	r4, [sp, #20]
 800058e:	9406      	str	r4, [sp, #24]
 8000590:	9407      	str	r4, [sp, #28]

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000592:	9401      	str	r4, [sp, #4]
 8000594:	4b1d      	ldr	r3, [pc, #116]	; (800060c <SystemClock_Config+0x94>)
 8000596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000598:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800059c:	641a      	str	r2, [r3, #64]	; 0x40
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	9402      	str	r4, [sp, #8]
 80005aa:	4b19      	ldr	r3, [pc, #100]	; (8000610 <SystemClock_Config+0x98>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ba:	9302      	str	r3, [sp, #8]
 80005bc:	9b02      	ldr	r3, [sp, #8]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005be:	2502      	movs	r5, #2
 80005c0:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c2:	2301      	movs	r3, #1
 80005c4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c6:	2310      	movs	r3, #16
 80005c8:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005cc:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ce:	2308      	movs	r3, #8
 80005d0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 80005d2:	2378      	movs	r3, #120	; 0x78
 80005d4:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d6:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005d8:	2304      	movs	r3, #4
 80005da:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	a808      	add	r0, sp, #32
 80005de:	f000 fa27 	bl	8000a30 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ee:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005f6:	2103      	movs	r1, #3
 80005f8:	a803      	add	r0, sp, #12
 80005fa:	f000 fc87 	bl	8000f0c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80005fe:	4622      	mov	r2, r4
 8000600:	4621      	mov	r1, r4
 8000602:	4620      	mov	r0, r4
 8000604:	f000 fbe0 	bl	8000dc8 <HAL_RCC_MCOConfig>
}
 8000608:	b015      	add	sp, #84	; 0x54
 800060a:	bd30      	pop	{r4, r5, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <main>:
{
 8000614:	b508      	push	{r3, lr}
  HAL_Init();
 8000616:	f000 f881 	bl	800071c <HAL_Init>
  SystemClock_Config();
 800061a:	f7ff ffad 	bl	8000578 <SystemClock_Config>
  MX_GPIO_Init();
 800061e:	f7ff ff53 	bl	80004c8 <MX_GPIO_Init>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000626:	4803      	ldr	r0, [pc, #12]	; (8000634 <main+0x20>)
 8000628:	f000 f9fe 	bl	8000a28 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800062c:	2064      	movs	r0, #100	; 0x64
 800062e:	f000 f8a1 	bl	8000774 <HAL_Delay>
 8000632:	e7f6      	b.n	8000622 <main+0xe>
 8000634:	40020c00 	.word	0x40020c00

08000638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063a:	2100      	movs	r1, #0
 800063c:	9100      	str	r1, [sp, #0]
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <HAL_MspInit+0x34>)
 8000640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000642:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000646:	645a      	str	r2, [r3, #68]	; 0x44
 8000648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800064a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800064e:	9200      	str	r2, [sp, #0]
 8000650:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	9101      	str	r1, [sp, #4]
 8000654:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000656:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800065a:	641a      	str	r2, [r3, #64]	; 0x40
 800065c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000666:	b002      	add	sp, #8
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800

08000670 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000670:	4770      	bx	lr

08000672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000672:	e7fe      	b.n	8000672 <HardFault_Handler>

08000674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000674:	e7fe      	b.n	8000674 <MemManage_Handler>

08000676 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000676:	e7fe      	b.n	8000676 <BusFault_Handler>

08000678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000678:	e7fe      	b.n	8000678 <UsageFault_Handler>

0800067a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800067a:	4770      	bx	lr

0800067c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067c:	4770      	bx	lr

0800067e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800067e:	4770      	bx	lr

08000680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000680:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000682:	f000 f865 	bl	8000750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000686:	bd08      	pop	{r3, pc}

08000688 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000688:	490f      	ldr	r1, [pc, #60]	; (80006c8 <SystemInit+0x40>)
 800068a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800068e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <SystemInit+0x44>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	f042 0201 	orr.w	r2, r2, #1
 800069e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006a0:	2000      	movs	r0, #0
 80006a2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80006aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80006ae:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80006b0:	4a07      	ldr	r2, [pc, #28]	; (80006d0 <SystemInit+0x48>)
 80006b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80006ba:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80006bc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80006c2:	608b      	str	r3, [r1, #8]
#endif
}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000ed00 	.word	0xe000ed00
 80006cc:	40023800 	.word	0x40023800
 80006d0:	24003010 	.word	0x24003010

080006d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d4:	b510      	push	{r4, lr}
 80006d6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <HAL_InitTick+0x40>)
 80006da:	7818      	ldrb	r0, [r3, #0]
 80006dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e0:	fbb3 f3f0 	udiv	r3, r3, r0
 80006e4:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <HAL_InitTick+0x44>)
 80006e6:	6810      	ldr	r0, [r2, #0]
 80006e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80006ec:	f000 f89c 	bl	8000828 <HAL_SYSTICK_Config>
 80006f0:	b968      	cbnz	r0, 800070e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f2:	2c0f      	cmp	r4, #15
 80006f4:	d901      	bls.n	80006fa <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80006f6:	2001      	movs	r0, #1
 80006f8:	e00a      	b.n	8000710 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006fa:	2200      	movs	r2, #0
 80006fc:	4621      	mov	r1, r4
 80006fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000702:	f000 f85d 	bl	80007c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000706:	4b03      	ldr	r3, [pc, #12]	; (8000714 <HAL_InitTick+0x40>)
 8000708:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 800070a:	2000      	movs	r0, #0
 800070c:	e000      	b.n	8000710 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800070e:	2001      	movs	r0, #1
}
 8000710:	bd10      	pop	{r4, pc}
 8000712:	bf00      	nop
 8000714:	20000004 	.word	0x20000004
 8000718:	20000000 	.word	0x20000000

0800071c <HAL_Init>:
{
 800071c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <HAL_Init+0x30>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000726:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800072e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000736:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000738:	2003      	movs	r0, #3
 800073a:	f000 f82f 	bl	800079c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800073e:	2000      	movs	r0, #0
 8000740:	f7ff ffc8 	bl	80006d4 <HAL_InitTick>
  HAL_MspInit();
 8000744:	f7ff ff78 	bl	8000638 <HAL_MspInit>
}
 8000748:	2000      	movs	r0, #0
 800074a:	bd08      	pop	{r3, pc}
 800074c:	40023c00 	.word	0x40023c00

08000750 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000750:	4a03      	ldr	r2, [pc, #12]	; (8000760 <HAL_IncTick+0x10>)
 8000752:	6811      	ldr	r1, [r2, #0]
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <HAL_IncTick+0x14>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	440b      	add	r3, r1
 800075a:	6013      	str	r3, [r2, #0]
}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	20000028 	.word	0x20000028
 8000764:	20000004 	.word	0x20000004

08000768 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000768:	4b01      	ldr	r3, [pc, #4]	; (8000770 <HAL_GetTick+0x8>)
 800076a:	6818      	ldr	r0, [r3, #0]
}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	20000028 	.word	0x20000028

08000774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000774:	b538      	push	{r3, r4, r5, lr}
 8000776:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000778:	f7ff fff6 	bl	8000768 <HAL_GetTick>
 800077c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800077e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000782:	d002      	beq.n	800078a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <HAL_Delay+0x24>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800078a:	f7ff ffed 	bl	8000768 <HAL_GetTick>
 800078e:	1b40      	subs	r0, r0, r5
 8000790:	42a0      	cmp	r0, r4
 8000792:	d3fa      	bcc.n	800078a <HAL_Delay+0x16>
  {
  }
}
 8000794:	bd38      	pop	{r3, r4, r5, pc}
 8000796:	bf00      	nop
 8000798:	20000004 	.word	0x20000004

0800079c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800079c:	4a07      	ldr	r2, [pc, #28]	; (80007bc <HAL_NVIC_SetPriorityGrouping+0x20>)
 800079e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007a4:	041b      	lsls	r3, r3, #16
 80007a6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80007a8:	0200      	lsls	r0, r0, #8
 80007aa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007ae:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80007b0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80007b4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80007b8:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80007ba:	4770      	bx	lr
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007c0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <HAL_NVIC_SetPriority+0x60>)
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ca:	f1c3 0407 	rsb	r4, r3, #7
 80007ce:	2c04      	cmp	r4, #4
 80007d0:	bf28      	it	cs
 80007d2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d4:	1d1d      	adds	r5, r3, #4
 80007d6:	2d06      	cmp	r5, #6
 80007d8:	d918      	bls.n	800080c <HAL_NVIC_SetPriority+0x4c>
 80007da:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007dc:	f04f 35ff 	mov.w	r5, #4294967295
 80007e0:	fa05 f404 	lsl.w	r4, r5, r4
 80007e4:	ea21 0104 	bic.w	r1, r1, r4
 80007e8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ea:	fa05 f303 	lsl.w	r3, r5, r3
 80007ee:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80007f4:	2800      	cmp	r0, #0
 80007f6:	db0b      	blt.n	8000810 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f8:	0109      	lsls	r1, r1, #4
 80007fa:	b2c9      	uxtb	r1, r1
 80007fc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000800:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000804:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000808:	bc30      	pop	{r4, r5}
 800080a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800080c:	2300      	movs	r3, #0
 800080e:	e7e5      	b.n	80007dc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000810:	f000 000f 	and.w	r0, r0, #15
 8000814:	0109      	lsls	r1, r1, #4
 8000816:	b2c9      	uxtb	r1, r1
 8000818:	4b02      	ldr	r3, [pc, #8]	; (8000824 <HAL_NVIC_SetPriority+0x64>)
 800081a:	5419      	strb	r1, [r3, r0]
 800081c:	e7f4      	b.n	8000808 <HAL_NVIC_SetPriority+0x48>
 800081e:	bf00      	nop
 8000820:	e000ed00 	.word	0xe000ed00
 8000824:	e000ed14 	.word	0xe000ed14

08000828 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000828:	3801      	subs	r0, #1
 800082a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800082e:	d20a      	bcs.n	8000846 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_SYSTICK_Config+0x24>)
 8000832:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000834:	4a06      	ldr	r2, [pc, #24]	; (8000850 <HAL_SYSTICK_Config+0x28>)
 8000836:	21f0      	movs	r1, #240	; 0xf0
 8000838:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800083c:	2000      	movs	r0, #0
 800083e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000840:	2207      	movs	r2, #7
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000846:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000e010 	.word	0xe000e010
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000854:	2300      	movs	r3, #0
 8000856:	2b0f      	cmp	r3, #15
 8000858:	f200 80d7 	bhi.w	8000a0a <HAL_GPIO_Init+0x1b6>
{
 800085c:	b4f0      	push	{r4, r5, r6, r7}
 800085e:	b082      	sub	sp, #8
 8000860:	e039      	b.n	80008d6 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000862:	2207      	movs	r2, #7
 8000864:	e000      	b.n	8000868 <HAL_GPIO_Init+0x14>
 8000866:	2200      	movs	r2, #0
 8000868:	40b2      	lsls	r2, r6
 800086a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800086c:	3402      	adds	r4, #2
 800086e:	4e67      	ldr	r6, [pc, #412]	; (8000a0c <HAL_GPIO_Init+0x1b8>)
 8000870:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000874:	4a66      	ldr	r2, [pc, #408]	; (8000a10 <HAL_GPIO_Init+0x1bc>)
 8000876:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000878:	43ea      	mvns	r2, r5
 800087a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800087e:	684f      	ldr	r7, [r1, #4]
 8000880:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000884:	d001      	beq.n	800088a <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000886:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 800088a:	4c61      	ldr	r4, [pc, #388]	; (8000a10 <HAL_GPIO_Init+0x1bc>)
 800088c:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 800088e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000890:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000894:	684f      	ldr	r7, [r1, #4]
 8000896:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800089a:	d001      	beq.n	80008a0 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 800089c:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80008a0:	4c5b      	ldr	r4, [pc, #364]	; (8000a10 <HAL_GPIO_Init+0x1bc>)
 80008a2:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008a4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80008a6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008aa:	684f      	ldr	r7, [r1, #4]
 80008ac:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80008b0:	d001      	beq.n	80008b6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80008b2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80008b6:	4c56      	ldr	r4, [pc, #344]	; (8000a10 <HAL_GPIO_Init+0x1bc>)
 80008b8:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80008ba:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80008bc:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008be:	684e      	ldr	r6, [r1, #4]
 80008c0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80008c4:	d001      	beq.n	80008ca <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80008c6:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80008ca:	4c51      	ldr	r4, [pc, #324]	; (8000a10 <HAL_GPIO_Init+0x1bc>)
 80008cc:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008ce:	3301      	adds	r3, #1
 80008d0:	2b0f      	cmp	r3, #15
 80008d2:	f200 8097 	bhi.w	8000a04 <HAL_GPIO_Init+0x1b0>
    ioposition = 0x01U << position;
 80008d6:	2201      	movs	r2, #1
 80008d8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008da:	680c      	ldr	r4, [r1, #0]
 80008dc:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80008e0:	42aa      	cmp	r2, r5
 80008e2:	d1f4      	bne.n	80008ce <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e4:	684c      	ldr	r4, [r1, #4]
 80008e6:	2c02      	cmp	r4, #2
 80008e8:	d001      	beq.n	80008ee <HAL_GPIO_Init+0x9a>
 80008ea:	2c12      	cmp	r4, #18
 80008ec:	d110      	bne.n	8000910 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 80008ee:	08de      	lsrs	r6, r3, #3
 80008f0:	3608      	adds	r6, #8
 80008f2:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008f6:	f003 0407 	and.w	r4, r3, #7
 80008fa:	00a7      	lsls	r7, r4, #2
 80008fc:	240f      	movs	r4, #15
 80008fe:	40bc      	lsls	r4, r7
 8000900:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000904:	690c      	ldr	r4, [r1, #16]
 8000906:	40bc      	lsls	r4, r7
 8000908:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 800090c:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8000910:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000912:	005f      	lsls	r7, r3, #1
 8000914:	2603      	movs	r6, #3
 8000916:	40be      	lsls	r6, r7
 8000918:	43f6      	mvns	r6, r6
 800091a:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800091e:	684c      	ldr	r4, [r1, #4]
 8000920:	f004 0403 	and.w	r4, r4, #3
 8000924:	40bc      	lsls	r4, r7
 8000926:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800092a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800092c:	684c      	ldr	r4, [r1, #4]
 800092e:	f104 3cff 	add.w	ip, r4, #4294967295
 8000932:	f1bc 0f01 	cmp.w	ip, #1
 8000936:	d903      	bls.n	8000940 <HAL_GPIO_Init+0xec>
 8000938:	2c11      	cmp	r4, #17
 800093a:	d001      	beq.n	8000940 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800093c:	2c12      	cmp	r4, #18
 800093e:	d110      	bne.n	8000962 <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 8000940:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000942:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000946:	68cc      	ldr	r4, [r1, #12]
 8000948:	40bc      	lsls	r4, r7
 800094a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 800094e:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000950:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000952:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000956:	684c      	ldr	r4, [r1, #4]
 8000958:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800095c:	409c      	lsls	r4, r3
 800095e:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8000960:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8000962:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000964:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000966:	688a      	ldr	r2, [r1, #8]
 8000968:	40ba      	lsls	r2, r7
 800096a:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 800096c:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800096e:	684a      	ldr	r2, [r1, #4]
 8000970:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000974:	d0ab      	beq.n	80008ce <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	2200      	movs	r2, #0
 8000978:	9201      	str	r2, [sp, #4]
 800097a:	4a26      	ldr	r2, [pc, #152]	; (8000a14 <HAL_GPIO_Init+0x1c0>)
 800097c:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800097e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000982:	6454      	str	r4, [r2, #68]	; 0x44
 8000984:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000986:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800098a:	9201      	str	r2, [sp, #4]
 800098c:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800098e:	089c      	lsrs	r4, r3, #2
 8000990:	1ca6      	adds	r6, r4, #2
 8000992:	4a1e      	ldr	r2, [pc, #120]	; (8000a0c <HAL_GPIO_Init+0x1b8>)
 8000994:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000998:	f003 0203 	and.w	r2, r3, #3
 800099c:	0096      	lsls	r6, r2, #2
 800099e:	220f      	movs	r2, #15
 80009a0:	40b2      	lsls	r2, r6
 80009a2:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009a6:	4a1c      	ldr	r2, [pc, #112]	; (8000a18 <HAL_GPIO_Init+0x1c4>)
 80009a8:	4290      	cmp	r0, r2
 80009aa:	f43f af5c 	beq.w	8000866 <HAL_GPIO_Init+0x12>
 80009ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80009b2:	4290      	cmp	r0, r2
 80009b4:	d01a      	beq.n	80009ec <HAL_GPIO_Init+0x198>
 80009b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80009ba:	4290      	cmp	r0, r2
 80009bc:	d018      	beq.n	80009f0 <HAL_GPIO_Init+0x19c>
 80009be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80009c2:	4290      	cmp	r0, r2
 80009c4:	d016      	beq.n	80009f4 <HAL_GPIO_Init+0x1a0>
 80009c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80009ca:	4290      	cmp	r0, r2
 80009cc:	d014      	beq.n	80009f8 <HAL_GPIO_Init+0x1a4>
 80009ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80009d2:	4290      	cmp	r0, r2
 80009d4:	d012      	beq.n	80009fc <HAL_GPIO_Init+0x1a8>
 80009d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80009da:	4290      	cmp	r0, r2
 80009dc:	d010      	beq.n	8000a00 <HAL_GPIO_Init+0x1ac>
 80009de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80009e2:	4290      	cmp	r0, r2
 80009e4:	f43f af3d 	beq.w	8000862 <HAL_GPIO_Init+0xe>
 80009e8:	2208      	movs	r2, #8
 80009ea:	e73d      	b.n	8000868 <HAL_GPIO_Init+0x14>
 80009ec:	2201      	movs	r2, #1
 80009ee:	e73b      	b.n	8000868 <HAL_GPIO_Init+0x14>
 80009f0:	2202      	movs	r2, #2
 80009f2:	e739      	b.n	8000868 <HAL_GPIO_Init+0x14>
 80009f4:	2203      	movs	r2, #3
 80009f6:	e737      	b.n	8000868 <HAL_GPIO_Init+0x14>
 80009f8:	2204      	movs	r2, #4
 80009fa:	e735      	b.n	8000868 <HAL_GPIO_Init+0x14>
 80009fc:	2205      	movs	r2, #5
 80009fe:	e733      	b.n	8000868 <HAL_GPIO_Init+0x14>
 8000a00:	2206      	movs	r2, #6
 8000a02:	e731      	b.n	8000868 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000a04:	b002      	add	sp, #8
 8000a06:	bcf0      	pop	{r4, r5, r6, r7}
 8000a08:	4770      	bx	lr
 8000a0a:	4770      	bx	lr
 8000a0c:	40013800 	.word	0x40013800
 8000a10:	40013c00 	.word	0x40013c00
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020000 	.word	0x40020000

08000a1c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a1c:	b912      	cbnz	r2, 8000a24 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a1e:	0409      	lsls	r1, r1, #16
 8000a20:	6181      	str	r1, [r0, #24]
  }
}
 8000a22:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000a24:	6181      	str	r1, [r0, #24]
 8000a26:	4770      	bx	lr

08000a28 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000a28:	6943      	ldr	r3, [r0, #20]
 8000a2a:	4059      	eors	r1, r3
 8000a2c:	6141      	str	r1, [r0, #20]
}
 8000a2e:	4770      	bx	lr

08000a30 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a30:	2800      	cmp	r0, #0
 8000a32:	f000 81bb 	beq.w	8000dac <HAL_RCC_OscConfig+0x37c>
{
 8000a36:	b570      	push	{r4, r5, r6, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a3c:	6803      	ldr	r3, [r0, #0]
 8000a3e:	f013 0f01 	tst.w	r3, #1
 8000a42:	d03b      	beq.n	8000abc <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a44:	4ba7      	ldr	r3, [pc, #668]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	f003 030c 	and.w	r3, r3, #12
 8000a4c:	2b04      	cmp	r3, #4
 8000a4e:	d02c      	beq.n	8000aaa <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a50:	4ba4      	ldr	r3, [pc, #656]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a58:	2b08      	cmp	r3, #8
 8000a5a:	d021      	beq.n	8000aa0 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a5c:	6863      	ldr	r3, [r4, #4]
 8000a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a62:	d04f      	beq.n	8000b04 <HAL_RCC_OscConfig+0xd4>
 8000a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a68:	d052      	beq.n	8000b10 <HAL_RCC_OscConfig+0xe0>
 8000a6a:	4b9e      	ldr	r3, [pc, #632]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a7a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000a7c:	6863      	ldr	r3, [r4, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d050      	beq.n	8000b24 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a82:	f7ff fe71 	bl	8000768 <HAL_GetTick>
 8000a86:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a88:	4b96      	ldr	r3, [pc, #600]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000a90:	d114      	bne.n	8000abc <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a92:	f7ff fe69 	bl	8000768 <HAL_GetTick>
 8000a96:	1b40      	subs	r0, r0, r5
 8000a98:	2864      	cmp	r0, #100	; 0x64
 8000a9a:	d9f5      	bls.n	8000a88 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	e18a      	b.n	8000db6 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000aa0:	4b90      	ldr	r3, [pc, #576]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000aa8:	d0d8      	beq.n	8000a5c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aaa:	4b8e      	ldr	r3, [pc, #568]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ab2:	d003      	beq.n	8000abc <HAL_RCC_OscConfig+0x8c>
 8000ab4:	6863      	ldr	r3, [r4, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f000 817a 	beq.w	8000db0 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000abc:	6823      	ldr	r3, [r4, #0]
 8000abe:	f013 0f02 	tst.w	r3, #2
 8000ac2:	d055      	beq.n	8000b70 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ac4:	4b87      	ldr	r3, [pc, #540]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	f013 0f0c 	tst.w	r3, #12
 8000acc:	d03e      	beq.n	8000b4c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ace:	4b85      	ldr	r3, [pc, #532]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ad6:	2b08      	cmp	r3, #8
 8000ad8:	d033      	beq.n	8000b42 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ada:	68e3      	ldr	r3, [r4, #12]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d068      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ae0:	4b81      	ldr	r3, [pc, #516]	; (8000ce8 <HAL_RCC_OscConfig+0x2b8>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ae6:	f7ff fe3f 	bl	8000768 <HAL_GetTick>
 8000aea:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aec:	4b7d      	ldr	r3, [pc, #500]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f013 0f02 	tst.w	r3, #2
 8000af4:	d154      	bne.n	8000ba0 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000af6:	f7ff fe37 	bl	8000768 <HAL_GetTick>
 8000afa:	1b40      	subs	r0, r0, r5
 8000afc:	2802      	cmp	r0, #2
 8000afe:	d9f5      	bls.n	8000aec <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000b00:	2003      	movs	r0, #3
 8000b02:	e158      	b.n	8000db6 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b04:	4a77      	ldr	r2, [pc, #476]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000b06:	6813      	ldr	r3, [r2, #0]
 8000b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	e7b5      	b.n	8000a7c <HAL_RCC_OscConfig+0x4c>
 8000b10:	4b74      	ldr	r3, [pc, #464]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	e7ab      	b.n	8000a7c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000b24:	f7ff fe20 	bl	8000768 <HAL_GetTick>
 8000b28:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b2a:	4b6e      	ldr	r3, [pc, #440]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000b32:	d0c3      	beq.n	8000abc <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b34:	f7ff fe18 	bl	8000768 <HAL_GetTick>
 8000b38:	1b40      	subs	r0, r0, r5
 8000b3a:	2864      	cmp	r0, #100	; 0x64
 8000b3c:	d9f5      	bls.n	8000b2a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000b3e:	2003      	movs	r0, #3
 8000b40:	e139      	b.n	8000db6 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b42:	4b68      	ldr	r3, [pc, #416]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000b4a:	d1c6      	bne.n	8000ada <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b4c:	4b65      	ldr	r3, [pc, #404]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f013 0f02 	tst.w	r3, #2
 8000b54:	d004      	beq.n	8000b60 <HAL_RCC_OscConfig+0x130>
 8000b56:	68e3      	ldr	r3, [r4, #12]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d001      	beq.n	8000b60 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	e12a      	b.n	8000db6 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b60:	4a60      	ldr	r2, [pc, #384]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000b62:	6813      	ldr	r3, [r2, #0]
 8000b64:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b68:	6921      	ldr	r1, [r4, #16]
 8000b6a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b6e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b70:	6823      	ldr	r3, [r4, #0]
 8000b72:	f013 0f08 	tst.w	r3, #8
 8000b76:	d040      	beq.n	8000bfa <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000b78:	6963      	ldr	r3, [r4, #20]
 8000b7a:	b363      	cbz	r3, 8000bd6 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b7c:	4b5b      	ldr	r3, [pc, #364]	; (8000cec <HAL_RCC_OscConfig+0x2bc>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b82:	f7ff fdf1 	bl	8000768 <HAL_GetTick>
 8000b86:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b88:	4b56      	ldr	r3, [pc, #344]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b8c:	f013 0f02 	tst.w	r3, #2
 8000b90:	d133      	bne.n	8000bfa <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b92:	f7ff fde9 	bl	8000768 <HAL_GetTick>
 8000b96:	1b40      	subs	r0, r0, r5
 8000b98:	2802      	cmp	r0, #2
 8000b9a:	d9f5      	bls.n	8000b88 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	e10a      	b.n	8000db6 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ba0:	4a50      	ldr	r2, [pc, #320]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000ba2:	6813      	ldr	r3, [r2, #0]
 8000ba4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ba8:	6921      	ldr	r1, [r4, #16]
 8000baa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000bae:	6013      	str	r3, [r2, #0]
 8000bb0:	e7de      	b.n	8000b70 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8000bb2:	4b4d      	ldr	r3, [pc, #308]	; (8000ce8 <HAL_RCC_OscConfig+0x2b8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bb8:	f7ff fdd6 	bl	8000768 <HAL_GetTick>
 8000bbc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bbe:	4b49      	ldr	r3, [pc, #292]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f013 0f02 	tst.w	r3, #2
 8000bc6:	d0d3      	beq.n	8000b70 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bc8:	f7ff fdce 	bl	8000768 <HAL_GetTick>
 8000bcc:	1b40      	subs	r0, r0, r5
 8000bce:	2802      	cmp	r0, #2
 8000bd0:	d9f5      	bls.n	8000bbe <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8000bd2:	2003      	movs	r0, #3
 8000bd4:	e0ef      	b.n	8000db6 <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000bd6:	4b45      	ldr	r3, [pc, #276]	; (8000cec <HAL_RCC_OscConfig+0x2bc>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bdc:	f7ff fdc4 	bl	8000768 <HAL_GetTick>
 8000be0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000be2:	4b40      	ldr	r3, [pc, #256]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000be6:	f013 0f02 	tst.w	r3, #2
 8000bea:	d006      	beq.n	8000bfa <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bec:	f7ff fdbc 	bl	8000768 <HAL_GetTick>
 8000bf0:	1b40      	subs	r0, r0, r5
 8000bf2:	2802      	cmp	r0, #2
 8000bf4:	d9f5      	bls.n	8000be2 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8000bf6:	2003      	movs	r0, #3
 8000bf8:	e0dd      	b.n	8000db6 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	f013 0f04 	tst.w	r3, #4
 8000c00:	d079      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c02:	4b38      	ldr	r3, [pc, #224]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000c0a:	d133      	bne.n	8000c74 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	9301      	str	r3, [sp, #4]
 8000c10:	4b34      	ldr	r3, [pc, #208]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c18:	641a      	str	r2, [r3, #64]	; 0x40
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c24:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c26:	4b32      	ldr	r3, [pc, #200]	; (8000cf0 <HAL_RCC_OscConfig+0x2c0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000c2e:	d023      	beq.n	8000c78 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c30:	68a3      	ldr	r3, [r4, #8]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d034      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x270>
 8000c36:	2b05      	cmp	r3, #5
 8000c38:	d038      	beq.n	8000cac <HAL_RCC_OscConfig+0x27c>
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000c3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000c3e:	f022 0201 	bic.w	r2, r2, #1
 8000c42:	671a      	str	r2, [r3, #112]	; 0x70
 8000c44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000c46:	f022 0204 	bic.w	r2, r2, #4
 8000c4a:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000c4c:	68a3      	ldr	r3, [r4, #8]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d036      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c52:	f7ff fd89 	bl	8000768 <HAL_GetTick>
 8000c56:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c5c:	f013 0f02 	tst.w	r3, #2
 8000c60:	d148      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c62:	f7ff fd81 	bl	8000768 <HAL_GetTick>
 8000c66:	1b80      	subs	r0, r0, r6
 8000c68:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c6c:	4298      	cmp	r0, r3
 8000c6e:	d9f3      	bls.n	8000c58 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8000c70:	2003      	movs	r0, #3
 8000c72:	e0a0      	b.n	8000db6 <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8000c74:	2500      	movs	r5, #0
 8000c76:	e7d6      	b.n	8000c26 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c78:	4a1d      	ldr	r2, [pc, #116]	; (8000cf0 <HAL_RCC_OscConfig+0x2c0>)
 8000c7a:	6813      	ldr	r3, [r2, #0]
 8000c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c80:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000c82:	f7ff fd71 	bl	8000768 <HAL_GetTick>
 8000c86:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_RCC_OscConfig+0x2c0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000c90:	d1ce      	bne.n	8000c30 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c92:	f7ff fd69 	bl	8000768 <HAL_GetTick>
 8000c96:	1b80      	subs	r0, r0, r6
 8000c98:	2802      	cmp	r0, #2
 8000c9a:	d9f5      	bls.n	8000c88 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	e08a      	b.n	8000db6 <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ca0:	4a10      	ldr	r2, [pc, #64]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000ca2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8000caa:	e7cf      	b.n	8000c4c <HAL_RCC_OscConfig+0x21c>
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000cae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000cb0:	f042 0204 	orr.w	r2, r2, #4
 8000cb4:	671a      	str	r2, [r3, #112]	; 0x70
 8000cb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000cb8:	f042 0201 	orr.w	r2, r2, #1
 8000cbc:	671a      	str	r2, [r3, #112]	; 0x70
 8000cbe:	e7c5      	b.n	8000c4c <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cc0:	f7ff fd52 	bl	8000768 <HAL_GetTick>
 8000cc4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <HAL_RCC_OscConfig+0x2b4>)
 8000cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cca:	f013 0f02 	tst.w	r3, #2
 8000cce:	d011      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cd0:	f7ff fd4a 	bl	8000768 <HAL_GetTick>
 8000cd4:	1b80      	subs	r0, r0, r6
 8000cd6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d9f3      	bls.n	8000cc6 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8000cde:	2003      	movs	r0, #3
 8000ce0:	e069      	b.n	8000db6 <HAL_RCC_OscConfig+0x386>
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	42470000 	.word	0x42470000
 8000cec:	42470e80 	.word	0x42470e80
 8000cf0:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000cf4:	b9e5      	cbnz	r5, 8000d30 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cf6:	69a3      	ldr	r3, [r4, #24]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d05b      	beq.n	8000db4 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000cfc:	4a30      	ldr	r2, [pc, #192]	; (8000dc0 <HAL_RCC_OscConfig+0x390>)
 8000cfe:	6892      	ldr	r2, [r2, #8]
 8000d00:	f002 020c 	and.w	r2, r2, #12
 8000d04:	2a08      	cmp	r2, #8
 8000d06:	d058      	beq.n	8000dba <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d017      	beq.n	8000d3c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d0c:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <HAL_RCC_OscConfig+0x394>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d12:	f7ff fd29 	bl	8000768 <HAL_GetTick>
 8000d16:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d18:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <HAL_RCC_OscConfig+0x390>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d20:	d042      	beq.n	8000da8 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d22:	f7ff fd21 	bl	8000768 <HAL_GetTick>
 8000d26:	1b00      	subs	r0, r0, r4
 8000d28:	2802      	cmp	r0, #2
 8000d2a:	d9f5      	bls.n	8000d18 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	e042      	b.n	8000db6 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d30:	4a23      	ldr	r2, [pc, #140]	; (8000dc0 <HAL_RCC_OscConfig+0x390>)
 8000d32:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	e7dc      	b.n	8000cf6 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8000d3c:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <HAL_RCC_OscConfig+0x394>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d42:	f7ff fd11 	bl	8000768 <HAL_GetTick>
 8000d46:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <HAL_RCC_OscConfig+0x390>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d50:	d006      	beq.n	8000d60 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d52:	f7ff fd09 	bl	8000768 <HAL_GetTick>
 8000d56:	1b40      	subs	r0, r0, r5
 8000d58:	2802      	cmp	r0, #2
 8000d5a:	d9f5      	bls.n	8000d48 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	e02a      	b.n	8000db6 <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000d60:	69e3      	ldr	r3, [r4, #28]
 8000d62:	6a22      	ldr	r2, [r4, #32]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d68:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000d6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d6e:	0852      	lsrs	r2, r2, #1
 8000d70:	3a01      	subs	r2, #1
 8000d72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d78:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d7c:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <HAL_RCC_OscConfig+0x390>)
 8000d7e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_RCC_OscConfig+0x394>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d86:	f7ff fcef 	bl	8000768 <HAL_GetTick>
 8000d8a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_RCC_OscConfig+0x390>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d94:	d106      	bne.n	8000da4 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d96:	f7ff fce7 	bl	8000768 <HAL_GetTick>
 8000d9a:	1b00      	subs	r0, r0, r4
 8000d9c:	2802      	cmp	r0, #2
 8000d9e:	d9f5      	bls.n	8000d8c <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8000da0:	2003      	movs	r0, #3
 8000da2:	e008      	b.n	8000db6 <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000da4:	2000      	movs	r0, #0
 8000da6:	e006      	b.n	8000db6 <HAL_RCC_OscConfig+0x386>
 8000da8:	2000      	movs	r0, #0
 8000daa:	e004      	b.n	8000db6 <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8000dac:	2001      	movs	r0, #1
}
 8000dae:	4770      	bx	lr
        return HAL_ERROR;
 8000db0:	2001      	movs	r0, #1
 8000db2:	e000      	b.n	8000db6 <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8000db4:	2000      	movs	r0, #0
}
 8000db6:	b002      	add	sp, #8
 8000db8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000dba:	2001      	movs	r0, #1
 8000dbc:	e7fb      	b.n	8000db6 <HAL_RCC_OscConfig+0x386>
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	42470060 	.word	0x42470060

08000dc8 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8000dc8:	b570      	push	{r4, r5, r6, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	460c      	mov	r4, r1
 8000dce:	4616      	mov	r6, r2
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8000dd0:	b308      	cbz	r0, 8000e16 <HAL_RCC_MCOConfig+0x4e>
  else
  {
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));

    /* MCO2 Clock Enable */
    __MCO2_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	9302      	str	r3, [sp, #8]
 8000dd6:	4d20      	ldr	r5, [pc, #128]	; (8000e58 <HAL_RCC_MCOConfig+0x90>)
 8000dd8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000dda:	f042 0204 	orr.w	r2, r2, #4
 8000dde:	632a      	str	r2, [r5, #48]	; 0x30
 8000de0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000de2:	f002 0204 	and.w	r2, r2, #4
 8000de6:	9202      	str	r2, [sp, #8]
 8000de8:	9a02      	ldr	r2, [sp, #8]

    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
 8000dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dee:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2202      	movs	r2, #2
 8000df2:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2203      	movs	r2, #3
 8000df6:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000dfa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8000dfc:	a903      	add	r1, sp, #12
 8000dfe:	4817      	ldr	r0, [pc, #92]	; (8000e5c <HAL_RCC_MCOConfig+0x94>)
 8000e00:	f7ff fd28 	bl	8000854 <HAL_GPIO_Init>

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8000e04:	68ab      	ldr	r3, [r5, #8]
 8000e06:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8000e0a:	ea44 04c6 	orr.w	r4, r4, r6, lsl #3
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	60ac      	str	r4, [r5, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8000e12:	b008      	add	sp, #32
 8000e14:	bd70      	pop	{r4, r5, r6, pc}
    __MCO1_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	4d0f      	ldr	r5, [pc, #60]	; (8000e58 <HAL_RCC_MCOConfig+0x90>)
 8000e1c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000e1e:	f042 0201 	orr.w	r2, r2, #1
 8000e22:	632a      	str	r2, [r5, #48]	; 0x30
 8000e24:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000e26:	f002 0201 	and.w	r2, r2, #1
 8000e2a:	9201      	str	r2, [sp, #4]
 8000e2c:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = MCO1_PIN;
 8000e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e32:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2202      	movs	r2, #2
 8000e36:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2203      	movs	r2, #3
 8000e3a:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e3e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8000e40:	a903      	add	r1, sp, #12
 8000e42:	4807      	ldr	r0, [pc, #28]	; (8000e60 <HAL_RCC_MCOConfig+0x98>)
 8000e44:	f7ff fd06 	bl	8000854 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8000e48:	68ab      	ldr	r3, [r5, #8]
 8000e4a:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8000e4e:	4334      	orrs	r4, r6
 8000e50:	431c      	orrs	r4, r3
 8000e52:	60ac      	str	r4, [r5, #8]
 8000e54:	e7dd      	b.n	8000e12 <HAL_RCC_MCOConfig+0x4a>
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020800 	.word	0x40020800
 8000e60:	40020000 	.word	0x40020000

08000e64 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e64:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f003 030c 	and.w	r3, r3, #12
 8000e6c:	2b04      	cmp	r3, #4
 8000e6e:	d044      	beq.n	8000efa <HAL_RCC_GetSysClockFreq+0x96>
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d001      	beq.n	8000e78 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e74:	4823      	ldr	r0, [pc, #140]	; (8000f04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000e76:	4770      	bx	lr
{
 8000e78:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e7c:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000e8a:	d013      	beq.n	8000eb4 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000e8e:	6859      	ldr	r1, [r3, #4]
 8000e90:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000e94:	2300      	movs	r3, #0
 8000e96:	481c      	ldr	r0, [pc, #112]	; (8000f08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000e98:	fba1 0100 	umull	r0, r1, r1, r0
 8000e9c:	f7ff f994 	bl	80001c8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000ea0:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000eac:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000eb0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000ebc:	461e      	mov	r6, r3
 8000ebe:	2700      	movs	r7, #0
 8000ec0:	015c      	lsls	r4, r3, #5
 8000ec2:	2500      	movs	r5, #0
 8000ec4:	1ae4      	subs	r4, r4, r3
 8000ec6:	eb65 0507 	sbc.w	r5, r5, r7
 8000eca:	01a9      	lsls	r1, r5, #6
 8000ecc:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8000ed0:	01a0      	lsls	r0, r4, #6
 8000ed2:	1b00      	subs	r0, r0, r4
 8000ed4:	eb61 0105 	sbc.w	r1, r1, r5
 8000ed8:	00cb      	lsls	r3, r1, #3
 8000eda:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ede:	00c4      	lsls	r4, r0, #3
 8000ee0:	19a0      	adds	r0, r4, r6
 8000ee2:	eb43 0107 	adc.w	r1, r3, r7
 8000ee6:	028b      	lsls	r3, r1, #10
 8000ee8:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8000eec:	0284      	lsls	r4, r0, #10
 8000eee:	4620      	mov	r0, r4
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f7ff f968 	bl	80001c8 <__aeabi_uldivmod>
 8000ef8:	e7d2      	b.n	8000ea0 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8000efa:	4803      	ldr	r0, [pc, #12]	; (8000f08 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800
 8000f04:	00f42400 	.word	0x00f42400
 8000f08:	017d7840 	.word	0x017d7840

08000f0c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000f0c:	2800      	cmp	r0, #0
 8000f0e:	f000 809d 	beq.w	800104c <HAL_RCC_ClockConfig+0x140>
{
 8000f12:	b570      	push	{r4, r5, r6, lr}
 8000f14:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f16:	4b4f      	ldr	r3, [pc, #316]	; (8001054 <HAL_RCC_ClockConfig+0x148>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d209      	bcs.n	8000f36 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f22:	b2cb      	uxtb	r3, r1
 8000f24:	4a4b      	ldr	r2, [pc, #300]	; (8001054 <HAL_RCC_ClockConfig+0x148>)
 8000f26:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f28:	6813      	ldr	r3, [r2, #0]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d001      	beq.n	8000f36 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8000f32:	2001      	movs	r0, #1
}
 8000f34:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	f013 0f02 	tst.w	r3, #2
 8000f3c:	d017      	beq.n	8000f6e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f3e:	f013 0f04 	tst.w	r3, #4
 8000f42:	d004      	beq.n	8000f4e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f44:	4a44      	ldr	r2, [pc, #272]	; (8001058 <HAL_RCC_ClockConfig+0x14c>)
 8000f46:	6893      	ldr	r3, [r2, #8]
 8000f48:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f4c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	f013 0f08 	tst.w	r3, #8
 8000f54:	d004      	beq.n	8000f60 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f56:	4a40      	ldr	r2, [pc, #256]	; (8001058 <HAL_RCC_ClockConfig+0x14c>)
 8000f58:	6893      	ldr	r3, [r2, #8]
 8000f5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f5e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f60:	4a3d      	ldr	r2, [pc, #244]	; (8001058 <HAL_RCC_ClockConfig+0x14c>)
 8000f62:	6893      	ldr	r3, [r2, #8]
 8000f64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f68:	68a0      	ldr	r0, [r4, #8]
 8000f6a:	4303      	orrs	r3, r0
 8000f6c:	6093      	str	r3, [r2, #8]
 8000f6e:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f70:	6823      	ldr	r3, [r4, #0]
 8000f72:	f013 0f01 	tst.w	r3, #1
 8000f76:	d032      	beq.n	8000fde <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f78:	6863      	ldr	r3, [r4, #4]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d021      	beq.n	8000fc2 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f7e:	1e9a      	subs	r2, r3, #2
 8000f80:	2a01      	cmp	r2, #1
 8000f82:	d925      	bls.n	8000fd0 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f84:	4a34      	ldr	r2, [pc, #208]	; (8001058 <HAL_RCC_ClockConfig+0x14c>)
 8000f86:	6812      	ldr	r2, [r2, #0]
 8000f88:	f012 0f02 	tst.w	r2, #2
 8000f8c:	d060      	beq.n	8001050 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f8e:	4932      	ldr	r1, [pc, #200]	; (8001058 <HAL_RCC_ClockConfig+0x14c>)
 8000f90:	688a      	ldr	r2, [r1, #8]
 8000f92:	f022 0203 	bic.w	r2, r2, #3
 8000f96:	4313      	orrs	r3, r2
 8000f98:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000f9a:	f7ff fbe5 	bl	8000768 <HAL_GetTick>
 8000f9e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fa0:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <HAL_RCC_ClockConfig+0x14c>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f003 030c 	and.w	r3, r3, #12
 8000fa8:	6862      	ldr	r2, [r4, #4]
 8000faa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000fae:	d016      	beq.n	8000fde <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fb0:	f7ff fbda 	bl	8000768 <HAL_GetTick>
 8000fb4:	1b80      	subs	r0, r0, r6
 8000fb6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fba:	4298      	cmp	r0, r3
 8000fbc:	d9f0      	bls.n	8000fa0 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8000fbe:	2003      	movs	r0, #3
 8000fc0:	e7b8      	b.n	8000f34 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc2:	4a25      	ldr	r2, [pc, #148]	; (8001058 <HAL_RCC_ClockConfig+0x14c>)
 8000fc4:	6812      	ldr	r2, [r2, #0]
 8000fc6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000fca:	d1e0      	bne.n	8000f8e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000fcc:	2001      	movs	r0, #1
 8000fce:	e7b1      	b.n	8000f34 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fd0:	4a21      	ldr	r2, [pc, #132]	; (8001058 <HAL_RCC_ClockConfig+0x14c>)
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000fd8:	d1d9      	bne.n	8000f8e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000fda:	2001      	movs	r0, #1
 8000fdc:	e7aa      	b.n	8000f34 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <HAL_RCC_ClockConfig+0x148>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	42ab      	cmp	r3, r5
 8000fe8:	d909      	bls.n	8000ffe <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fea:	b2ea      	uxtb	r2, r5
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <HAL_RCC_ClockConfig+0x148>)
 8000fee:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	42ab      	cmp	r3, r5
 8000ff8:	d001      	beq.n	8000ffe <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	e79a      	b.n	8000f34 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ffe:	6823      	ldr	r3, [r4, #0]
 8001000:	f013 0f04 	tst.w	r3, #4
 8001004:	d006      	beq.n	8001014 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001006:	4a14      	ldr	r2, [pc, #80]	; (8001058 <HAL_RCC_ClockConfig+0x14c>)
 8001008:	6893      	ldr	r3, [r2, #8]
 800100a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800100e:	68e1      	ldr	r1, [r4, #12]
 8001010:	430b      	orrs	r3, r1
 8001012:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001014:	6823      	ldr	r3, [r4, #0]
 8001016:	f013 0f08 	tst.w	r3, #8
 800101a:	d007      	beq.n	800102c <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800101c:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <HAL_RCC_ClockConfig+0x14c>)
 800101e:	6893      	ldr	r3, [r2, #8]
 8001020:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001024:	6921      	ldr	r1, [r4, #16]
 8001026:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800102a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800102c:	f7ff ff1a 	bl	8000e64 <HAL_RCC_GetSysClockFreq>
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_RCC_ClockConfig+0x14c>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001038:	4a08      	ldr	r2, [pc, #32]	; (800105c <HAL_RCC_ClockConfig+0x150>)
 800103a:	5cd3      	ldrb	r3, [r2, r3]
 800103c:	40d8      	lsrs	r0, r3
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_RCC_ClockConfig+0x154>)
 8001040:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff fb46 	bl	80006d4 <HAL_InitTick>
  return HAL_OK;
 8001048:	2000      	movs	r0, #0
 800104a:	e773      	b.n	8000f34 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 800104c:	2001      	movs	r0, #1
}
 800104e:	4770      	bx	lr
        return HAL_ERROR;
 8001050:	2001      	movs	r0, #1
 8001052:	e76f      	b.n	8000f34 <HAL_RCC_ClockConfig+0x28>
 8001054:	40023c00 	.word	0x40023c00
 8001058:	40023800 	.word	0x40023800
 800105c:	08001128 	.word	0x08001128
 8001060:	20000000 	.word	0x20000000

08001064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800109c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001068:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800106a:	e003      	b.n	8001074 <LoopCopyDataInit>

0800106c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800106e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001070:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001072:	3104      	adds	r1, #4

08001074 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001074:	480b      	ldr	r0, [pc, #44]	; (80010a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001078:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800107a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800107c:	d3f6      	bcc.n	800106c <CopyDataInit>
  ldr  r2, =_sbss
 800107e:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001080:	e002      	b.n	8001088 <LoopFillZerobss>

08001082 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001082:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001084:	f842 3b04 	str.w	r3, [r2], #4

08001088 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001088:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800108a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800108c:	d3f9      	bcc.n	8001082 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800108e:	f7ff fafb 	bl	8000688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001092:	f000 f811 	bl	80010b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001096:	f7ff fabd 	bl	8000614 <main>
  bx  lr    
 800109a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800109c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80010a0:	08001150 	.word	0x08001150
  ldr  r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010a8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80010ac:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80010b0:	2000002c 	.word	0x2000002c

080010b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC_IRQHandler>
	...

080010b8 <__libc_init_array>:
 80010b8:	b570      	push	{r4, r5, r6, lr}
 80010ba:	4e0d      	ldr	r6, [pc, #52]	; (80010f0 <__libc_init_array+0x38>)
 80010bc:	4c0d      	ldr	r4, [pc, #52]	; (80010f4 <__libc_init_array+0x3c>)
 80010be:	1ba4      	subs	r4, r4, r6
 80010c0:	10a4      	asrs	r4, r4, #2
 80010c2:	2500      	movs	r5, #0
 80010c4:	42a5      	cmp	r5, r4
 80010c6:	d109      	bne.n	80010dc <__libc_init_array+0x24>
 80010c8:	4e0b      	ldr	r6, [pc, #44]	; (80010f8 <__libc_init_array+0x40>)
 80010ca:	4c0c      	ldr	r4, [pc, #48]	; (80010fc <__libc_init_array+0x44>)
 80010cc:	f000 f820 	bl	8001110 <_init>
 80010d0:	1ba4      	subs	r4, r4, r6
 80010d2:	10a4      	asrs	r4, r4, #2
 80010d4:	2500      	movs	r5, #0
 80010d6:	42a5      	cmp	r5, r4
 80010d8:	d105      	bne.n	80010e6 <__libc_init_array+0x2e>
 80010da:	bd70      	pop	{r4, r5, r6, pc}
 80010dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010e0:	4798      	blx	r3
 80010e2:	3501      	adds	r5, #1
 80010e4:	e7ee      	b.n	80010c4 <__libc_init_array+0xc>
 80010e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010ea:	4798      	blx	r3
 80010ec:	3501      	adds	r5, #1
 80010ee:	e7f2      	b.n	80010d6 <__libc_init_array+0x1e>
 80010f0:	08001148 	.word	0x08001148
 80010f4:	08001148 	.word	0x08001148
 80010f8:	08001148 	.word	0x08001148
 80010fc:	0800114c 	.word	0x0800114c

08001100 <memset>:
 8001100:	4402      	add	r2, r0
 8001102:	4603      	mov	r3, r0
 8001104:	4293      	cmp	r3, r2
 8001106:	d100      	bne.n	800110a <memset+0xa>
 8001108:	4770      	bx	lr
 800110a:	f803 1b01 	strb.w	r1, [r3], #1
 800110e:	e7f9      	b.n	8001104 <memset+0x4>

08001110 <_init>:
 8001110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001112:	bf00      	nop
 8001114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001116:	bc08      	pop	{r3}
 8001118:	469e      	mov	lr, r3
 800111a:	4770      	bx	lr

0800111c <_fini>:
 800111c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111e:	bf00      	nop
 8001120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001122:	bc08      	pop	{r3}
 8001124:	469e      	mov	lr, r3
 8001126:	4770      	bx	lr
